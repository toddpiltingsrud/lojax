<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".js" #>
<#
var stripLogging = true;
var coverage     = false;
var addModules   = false;
#>

// namespace
var lojax = lojax || {};
<#
if (coverage)
{
#>
lojax.covered = [];
lojax.cover = function(index) {
	lojax.covered[index] = true;
};
<#
}
#>

(function($, lojax) { 
<#
var path = Host.ResolvePath("src");

var files = new DirectoryInfo(path + @"\core").GetFiles("*.js", SearchOption.AllDirectories);

foreach (var file in files)
{
	var lines = File.ReadAllLines(file.FullName);
    foreach (var line in lines)
    {
        if (stripLogging && IsLogExpression(line)) continue;
#>
    <#= line #>
<#  
		if (coverage) {
#>
<#= OutputCoverage(line) #><#  
		}
	}
}

if (addModules) 
{
	files = new DirectoryInfo(path + @"\modules").GetFiles("*.js", SearchOption.AllDirectories);

	foreach (var file in files)
	{
		var lines = File.ReadAllLines(file.FullName);
		foreach (var line in lines)
		{
			if (stripLogging && IsLogExpression(line)) continue;
#>
	<#= line #>
<#  
			if (coverage) {
#>
<#= OutputCoverage(line) #><#  
			}
		}
	}
}
#>

	lojax.Controller.init();

})(jQuery, lojax);

<#+ 

int coverageIndex = 0;
System.Text.RegularExpressions.Regex comment = new System.Text.RegularExpressions.Regex(@"\s*//");
System.Text.RegularExpressions.Regex function = new System.Text.RegularExpressions.Regex(@"function.+\{$");
System.Text.RegularExpressions.Regex ifStatement = new System.Text.RegularExpressions.Regex(@"if.+\{$");
System.Text.RegularExpressions.Regex elseStatement = new System.Text.RegularExpressions.Regex(@"else.+\{$");
System.Text.RegularExpressions.Regex lineEnd = new System.Text.RegularExpressions.Regex(@"\{$|;$");
System.Text.RegularExpressions.Regex rLog = new System.Text.RegularExpressions.Regex(@"lojax\.log\(|lojax\.verbose\(|lojax\.info\(|lojax\.warn\(");

private bool IsLogExpression(string line)
{
	return rLog.IsMatch(line);
}

bool inQualifyingStatement = false;

private string OutputCoverage(string line)
{
	if (!comment.IsMatch(line) && 
		(function.IsMatch(line) || ifStatement.IsMatch(line) || elseStatement.IsMatch(line)))
	{
		inQualifyingStatement = true;
	}
	if (inQualifyingStatement && lineEnd.IsMatch(line))
	{
		inQualifyingStatement = false;
		return "lojax.cover("+ (++coverageIndex).ToString() + ");\r\n";
	}

	return "";
}
#>
