<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".js" #>
<#
var path = "";
var stripLogging = false;
var coverage = false;
#>

// namespace
var lojax = lojax || {};
<#
if (coverage)
{
#>
lojax.covered = [];
lojax.cover = function(index) {
	lojax.covered[index] = true;
};
<#
}
#>

(function($, lojax) { 
<#
if (Directory.Exists(@"C:\Users\kitntodd"))
{
    path = @"C:\Users\kitntodd\OneDrive\Documents\Code\Projects\lojax\src";
}
else if (Directory.Exists(@"C:\Users\tpiltingsrud"))
{
    path = @"C:\Users\tpiltingsrud\OneDrive\Documents\Code\Projects\lojax\src";
}
else
{
    path = @"C:\Users\Todd\OneDrive\Documents\Code\Projects\lojax\src";
}

var files = new DirectoryInfo(path).GetFiles("*.js", SearchOption.AllDirectories);

foreach (var file in files)
{
	var lines = File.ReadAllLines(file.FullName);
    foreach (var line in lines)
    {
        if (stripLogging && IsLogExpression(line)) continue;
#>
    <#= line #>
<#  
		if (coverage) {
#>
<#= OutputCoverage(line) #><#  
		}
	}
}
#>

	// global
	lojax.instance = new lojax.Controller();

	// local
	var instance = lojax.instance;

})(jQuery, lojax);

<#+ 
private bool IsLogExpression(string line)
{
    if (line.Trim().StartsWith("lojax.log")) return true;
    return false;
}

int coverageIndex = 0;
System.Text.RegularExpressions.Regex function = new System.Text.RegularExpressions.Regex(@"function.+\{$");
System.Text.RegularExpressions.Regex lineEnd = new System.Text.RegularExpressions.Regex(@"\{$|;$");
bool inQualifyingStatement = false;

private string OutputCoverage(string line)
{
	if (function.IsMatch(line) || line.Trim().StartsWith("if ") || line.Trim().StartsWith("else "))
	{
		inQualifyingStatement = true;
	}
	if (inQualifyingStatement && lineEnd.IsMatch(line))
	{
		inQualifyingStatement = false;
		return "lojax.cover("+ (coverageIndex++).ToString() + ");\r\n";
	}

	return "";
}
#>
